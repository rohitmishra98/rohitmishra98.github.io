! function (a) {
    "use strict";
    a('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function () {
        if (location.pathname.replace(/^\//, "") == this.pathname.replace(/^\//, "") && location.hostname == this.hostname) {
            var e = a(this.hash);
            if ((e = e.length ? e : a("[name=" + this.hash.slice(1) + "]")).length) return a("html, body").animate({
                scrollTop: e.offset().top - 55.5
            }, 1e3, "easeInOutExpo"), !1
        }
    }), a(".js-scroll-trigger").click(function () {
        a(".navbar-collapse").collapse("hide")
    }), a("body").scrollspy({
        target: "#mainNav",
        offset: 57
    });
    var e = function () {
        a("#mainNav").offset().top > 100 ? a("#mainNav").addClass("navbar-shrink") : a("#mainNav").removeClass("navbar-shrink")
    };
    e(), a(window).scroll(e), window.sr = ScrollReveal(),
        sr.reveal(".sr-icons", {
            duration: 600,
            scale: .3,
            distance: "0px"
        }, 100), sr.reveal(".sr-button", {
            duration: 1e3,
            delay: 200
        }), sr.reveal(".sr-contact", {
            duration: 600,
            scale: .3,
            distance: "0px"
        }, 50), a(".popup-gallery").magnificPopup({
            delegate: "a",
            type: "image",
            tLoading: "Loading image #%curr%...",
            mainClass: "mfp-img-mobile",
            gallery: {
                enabled: !0,
                navigateByImgClick: !0,
                preload: [0, 1]
            },
            image: {
                tError: '<a href="%url%">The image #%curr%</a> could not be loaded.'
            }
        })
}(jQuery);


function flip(abc) {
    //    var a = document.getElementsByClassName("flipped");

    //    for(i=0;i<=a.length;i++){
    //        console.log(a[i]);
    //     // a[i].classList.remove("flipped");

    //    }

    $('.' + abc).toggleClass('flipped');

    $('.' + abc).children().toggleClass('sr-icons')
}


function flipicon(abc) {
    console.log(abc);
    $('.' + abc).toggleClass('flipped');
    // $('.'+abc).children().toggleClass('sr-contact')
}
var i = 0;

function startTimer() {
    console.log('start');

    setTimeout(function () {
        if (i % 2 == 0) {
            document.getElementById("ultra-img").src = "img/AS-Video-Call.png";
        } else {
            document.getElementById("ultra-img").src = "img/AS-Access-Code.png";
        }
        i++;
        startTimer();
    }, 2000);
}


// $( ".one" ).hover(
//     function() {
//         $('.one').toggleClass('flipped');
//     }
//   );




// var b_canvas,
//     contxt,
//     size = 0.1,
//     dotCount = 250,
//     lineWidth = .20,
//     neigborDistance = 55,
//     w = document.getElementById('c').width, h = document.getElementById('c').height,
//     clr = "#25343d"
//     dotArray = [];
//   var mode = 'neighbor';
//    // var mode = 'default';
//   var urlParams = {};
//   var logCount = 0;
//   //
//   start();
//   //
//   function start() {
//     b_canvas = document.getElementById("c");
//     contxt = b_canvas.getContext("2d");
//     contxt.lineWidth = lineWidth;
//     contxt.strokeStyle = clr;
//     createDots();

//     interval();

//   }

//   function interval() {
//     requestAnimationFrame(interval);
//     update();
//   }

//   function update() {
//     contxt.clearRect(0, 0, w, h);
//     var item, chance, sum, i;
//     dotArray.forEach(function(item) {
//       move(item);
//       contxt.fillStyle = item.color;
//       contxt.beginPath();
//       contxt.arc(item.x, item.y, item.rad, 0, 2 * Math.PI, false);
//       contxt.fill();
//     })

//     if (mode == "neighbor") {
//       drawLinesNeighbors();
//     } else {
//       // drawLines();
//     }
//   }

//   function move(itm) {
//     itm.iteration++;

//     if (itm.iteration < itm.totalIterations) {
//         itm.x = easeInOutQuart(itm.iteration, itm.curSpot.x, itm.tgt.x-itm.curSpot.x, itm.totalIterations);
//         itm.y = easeInOutQuart(itm.iteration, itm.curSpot.y, itm.tgt.y-itm.curSpot.y, itm.totalIterations);

//     }else{
//       itm.iteration=0;
//       itm.curSpot.x = itm.tgt.x;
//       itm.curSpot.y = itm.tgt.y;
//       itm.tgt.x = itm.tgt.x+1;
//       itm.tgt.y = itm.tgt.y +1;
//     }
//   }


//   function drawLines() {
//     var item, secondItem;
//     var i, k;
//     for (i = 0; i < dotArray.length; i++) {
//       for (k = i + 1; k < dotArray.length; k++) {
//         // logCount++;
//         if (k > i) {
//           item = dotArray[i];
//           secondItem = dotArray[k];
//           contxt.beginPath();
//           contxt.moveTo(item.x, item.y);
//           contxt.lineTo(secondItem.x, secondItem.y);
//           contxt.stroke();
//         }
//       }
//     }
//     // console.log(logCount);
//     // logCount = 0;
//   }

//   function drawLinesNeighbors() {
//     var i, k;
//     var item, secondItem, curDist;
//     for (i = 0; i < dotArray.length; i++) {
//       // dotArray[i].count = 0; 
//       for (k = i + 1; k < dotArray.length; k++) {
//         // logCount++;
//         item = dotArray[i];
//         secondItem = dotArray[k];
//         curDist = checkDist(item, secondItem);
//         if (curDist < neigborDistance) {
//           // item.count++;
//           contxt.beginPath();
//           contxt.moveTo(item.x, item.y);
//           contxt.lineTo(secondItem.x, secondItem.y);
//           contxt.stroke();
//         }
//       }
//     }
//   }

//   function checkDist(itemA, itemB) {
//     var x1 = itemA.x;
//     var y1 = itemA.y;
//     var x2 = itemB.x;
//     var y2 = itemB.y;

//     var d = Math.sqrt((x2 -= x1) * x2 + (y2 -= y1) * y2);
//     return d;
//   }

//   function createDots() {
//     var rad;
//     var dot;
//     for (var i = 0; i < dotCount; i++) {

//       rad = size;
//       dot = new Dot(
//         i,
//         rad,
//         4.292 * i,//w
//         0.9 * i +3 //h
//       )
//       dotArray.push(dot)
//     }
//   }

//   function Dot(i, rad, x, y) {
//     this.i = i;
//     this.rad = rad;
//     this.x = x;
//     this.y = y;

//     this.iteration = i*150+2000;
//     if(i%2!=0){
//     this.color = clr;
//     }
//     else{
//     this.color = "black";
//     }
//     //totalIterations is the time elapsed from a => b, randomizing breaks up the uniform motion '('see commented-out line below')'
//     // this.totalIterations = 300;

//     this.totalIterations = i*300+200;
//     this.curSpot = {
//       x: this.x,
//       y: this.y
//     };
//     this.tgt = {
//       x: randNum(400)+this.curSpot.x,
//       y: randNum(400)+this.curSpot.y,
//     };
//   }

//   function easeInOutQuart(t, b, c, d) {
//     if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
//     return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
//   }

//   function randNum(n){
//     var p = ((  Math.random() + Math.random() + Math.random()+ Math.random() + Math.random()+ Math.random() + Math.random()+ Math.random() + Math.random()) - 3) / 3;
//     console.log(p);
//     return p*n;
//   }